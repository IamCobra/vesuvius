generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  roleId        String?
  accounts      Account[]
  sessions      Session[]
  role          Roles?    @relation(fields: [roleId], references: [id])

  @@map("users")
}

model Roles {
  id       String @id @default(cuid())
  roleName String @unique
  users    User[]

  @@map("roles")
}

model Employees {
  id       String @id @default(cuid())
  name     String
  email    String @unique
  position String
  salary   Float?

  @@map("employees")
}

model LoginAttempt {
  id          String   @id @default(cuid())
  ipAddress   String   @unique
  attempts    Int      @default(1)
  lastAttempt DateTime @default(now())
  resetTime   DateTime

  @@map("login_attempts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  menuItems MenuItem[]

  @@map("categories")
}

model MenuItem {
  id          String            @id @default(cuid())
  name        String
  description String
  price       Decimal           @db.Decimal(10, 2)
  image       String?
  available   Boolean           @default(true)
  categoryId  String
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  variants    MenuItemVariant[]
  category    Category          @relation(fields: [categoryId], references: [id])
  orderItems  OrderItem[]

  @@unique([categoryId, name])
  @@map("menu_items")
}

model MenuItemVariant {
  id          String   @id @default(cuid())
  name        String
  priceChange Decimal  @db.Decimal(10, 2)
  menuItemId  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  menuItem    MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  @@map("menu_item_variants")
}

model Customer {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String
  email        String        @unique
  phone        String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  orders       Order[]
  reservations Reservation[]

  @@map("customers")
}

model TimeSlot {
  id        String   @id @default(cuid())
  startTime String
  endTime   String
  maxTables Int      @default(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("time_slots")
}

model DiningTable {
  id          String          @id @default(cuid())
  tableNumber Int             @unique
  seats       Int             @default(4)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  reserved    ReservedTable[]

  @@map("dining_tables")
}

model Reservation {
  id           String            @id @default(cuid())
  partySize    Int
  slotStartUtc DateTime
  slotEndUtc   DateTime
  customerId   String?
  status       ReservationStatus @default(CONFIRMED)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  orders       Order[]
  customer     Customer?         @relation(fields: [customerId], references: [id])
  reserved     ReservedTable[]

  @@index([slotStartUtc])
  @@index([slotEndUtc])
  @@map("reservations")
}

model ReservedTable {
  id            String      @id @default(cuid())
  startUtc      DateTime
  endUtc        DateTime
  reservationId String
  tableId       String
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)
  table         DiningTable @relation(fields: [tableId], references: [id])

  @@unique([reservationId, tableId])
  @@map("reserved_tables")
}

model Order {
  id            String       @id @default(cuid())
  reservationId String?
  customerId    String?
  tableNumber   Int?
  status        OrderStatus  @default(ORDERED)
  totalPrice    Decimal      @default(0) @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  items         OrderItem[]
  customer      Customer?    @relation(fields: [customerId], references: [id])
  reservation   Reservation? @relation(fields: [reservationId], references: [id])

  @@map("orders")
}

model OrderItem {
  id             String   @id @default(cuid())
  quantity       Int
  unitPrice      Decimal  @db.Decimal(10, 2)
  orderId        String
  menuItemId     String
  customizations Json?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  menuItem       MenuItem @relation(fields: [menuItemId], references: [id])
  order          Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model OpeningHour {
  id        String   @id @default(cuid())
  weekday   Int
  openTime  String
  closeTime String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([weekday])
}

model Blackout {
  id        String   @id @default(cuid())
  startUtc  DateTime @db.Timestamptz(6)
  endUtc    DateTime @db.Timestamptz(6)
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([startUtc, endUtc])
  @@map("blackouts")
}

model SlotSetting {
  id               Int      @id @default(1)
  slotMinutes      Int      @default(30)
  maxCoversPerSlot Int      @default(24)
  maxPartySize     Int      @default(8)
  timezone         String   @default("Europe/Copenhagen")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

enum ReservationStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum OrderStatus {
  ORDERED
  IN_PREPARATION
  READY
  SERVED
  COMPLETED
  CANCELLED
}
