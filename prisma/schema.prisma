generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Authentication Models (NextAuth.js)
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String // For credentials auth
  role          UserRole  @default(USER)
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

// Simple rate limiting
model LoginAttempt {
  id        String   @id @default(cuid())
  ipAddress String
  attempts  Int      @default(1)
  lastAttempt DateTime @default(now())
  resetTime DateTime

  @@unique([ipAddress])
  @@map("login_attempts")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

enum UserRole {
  USER
  ADMIN
  WAITER
  KITCHEN
}

model Category {
  id        String     @id @default(cuid())
  name      String     @unique
  menuItems MenuItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("categories")
}

model MenuItem {
  id          String  @id @default(cuid())
  name        String
  description String
  price       Decimal @db.Decimal(10, 2)
  image       String?
  available   Boolean @default(true)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  variants   MenuItemVariant[]
  orderItems OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([categoryId, name])
  @@map("menu_items")
}

model MenuItemVariant {
  id          String  @id @default(cuid())
  name        String // "Dobbelt", "Vegetarbøf", etc.
  priceChange Decimal @db.Decimal(10, 2) // +26 for dobbelt, +0 for vegetar

  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("menu_item_variants")
}

// Enhanced Customer Management
model Customer {
  id           String        @id @default(cuid())
  firstName    String
  lastName     String
  email        String        @unique
  phone        String? // Converted from INT to String for better phone handling
  reservations Reservation[]
  orders       Order[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("customers")
}

// Time Slot Management (kept for UI display, not used for reservations)
model TimeSlot {
  id        String   @id @default(cuid())
  startTime String // "17:00"
  endTime   String // "19:00"
  maxTables Int      @default(10) // Maximum available tables for this slot
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("time_slots")
}

// Dining Table Management
model DiningTable {
  id          String          @id @default(cuid())
  tableNumber Int             @unique
  seats       Int             @default(4) // Number of seats per table (2, 4, 6, 8)
  reserved    ReservedTable[]
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  @@map("dining_tables")
}

// Enhanced Reservations with rolling 120-minute window
model Reservation {
  id           String            @id @default(cuid())
  partySize    Int
  // Start of seating window (UTC). End is start + dwellMinutes (e.g. 120).
  slotStartUtc DateTime
  slotEndUtc   DateTime // derived on create (slotStartUtc + 120 minutes)
  customerId   String?
  customer     Customer?         @relation(fields: [customerId], references: [id])
  status       ReservationStatus @default(CONFIRMED)
  reserved     ReservedTable[]

  // Relations from your SQL
  orders Order[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([slotStartUtc])
  @@index([slotEndUtc])
  @@map("reservations")
}

// Junction table for reservations and tables with overlap prevention
model ReservedTable {
  id String @id @default(cuid())

  // Duped onto this row so Postgres can enforce overlap per table:
  startUtc DateTime
  endUtc   DateTime

  reservationId String
  reservation   Reservation @relation(fields: [reservationId], references: [id], onDelete: Cascade)

  tableId String
  table   DiningTable @relation(fields: [tableId], references: [id])

  @@unique([reservationId, tableId])
  // NOTE: the "no overlap" rule is added via a raw SQL migration (exclusion constraint)
  @@map("reserved_tables")
}

// Order Management (from your SQL)
model Order {
  id            String       @id @default(cuid())
  reservationId String? // Optional - some orders might not be tied to reservations
  reservation   Reservation? @relation(fields: [reservationId], references: [id])
  customerId    String? // Direct customer link for walk-ins
  customer      Customer?    @relation(fields: [customerId], references: [id])
  tableNumber   Int? // For walk-in customers
  status        OrderStatus  @default(ORDERED)
  totalPrice    Decimal      @default(0) @db.Decimal(10, 2)
  notes         String? // Special requests

  items OrderItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("orders")
}

// Order Items (from your OrderedDishes)
model OrderItem {
  id        String  @id @default(cuid())
  quantity  Int
  unitPrice Decimal @db.Decimal(10, 2)

  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  menuItemId String
  menuItem   MenuItem @relation(fields: [menuItemId], references: [id])

  // JSON for variants og tilvalg som "Dobbelt burger", "Ekstra ost"
  customizations Json?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("order_items")
}

//eployees and employee roles
model Employees {
  id String @id @default(cuid())
  userName String @db.VarChar(20)
  password String @db.VarChar(80)
  role Roles @relation(fields: [roleId], references: [id])
  roleId String
}
model Roles {
  id String @id @default(cuid())
  roleName String
  employees Employees[]
}


model OpeningHour {
  id        String   @id @default(cuid())
  // 0=Sunday … 6=Saturday
  weekday   Int
  openTime  String // "16:00"
  closeTime String // "22:00"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([weekday])
}

model Blackout {
  id        String   @id @default(cuid())
  startUtc  DateTime @db.Timestamptz
  endUtc    DateTime @db.Timestamptz
  reason    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([startUtc, endUtc])
  @@map("blackouts")
}

model SlotSetting {
  id               Int      @id @default(1)
  slotMinutes      Int      @default(30)
  maxCoversPerSlot Int      @default(24)
  maxPartySize     Int      @default(8)
  timezone         String   @default("Europe/Copenhagen")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}

// Enums
enum ReservationStatus {
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

enum OrderStatus {
  ORDERED
  IN_PREPARATION
  READY
  SERVED
  COMPLETED
  CANCELLED
}